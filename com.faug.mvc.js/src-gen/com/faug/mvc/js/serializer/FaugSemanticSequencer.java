/*
 * generated by Xtext 2.17.1
 */
package com.faug.mvc.js.serializer;

import com.faug.mvc.js.json.JSONArray;
import com.faug.mvc.js.json.JSONBoolean;
import com.faug.mvc.js.json.JSONNull;
import com.faug.mvc.js.json.JSONNumber;
import com.faug.mvc.js.json.JSONObject;
import com.faug.mvc.js.json.JSONPair;
import com.faug.mvc.js.json.JSONString;
import com.faug.mvc.js.json.JSONValue;
import com.faug.mvc.js.json.JsonPackage;
import com.faug.mvc.js.services.FaugGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FaugSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FaugGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JsonPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonPackage.JSON_ARRAY:
				sequence_JSONArray(context, (JSONArray) semanticObject); 
				return; 
			case JsonPackage.JSON_BOOLEAN:
				sequence_JSONBoolean(context, (JSONBoolean) semanticObject); 
				return; 
			case JsonPackage.JSON_NULL:
				sequence_JSONNull(context, (JSONNull) semanticObject); 
				return; 
			case JsonPackage.JSON_NUMBER:
				sequence_JSONNumber(context, (JSONNumber) semanticObject); 
				return; 
			case JsonPackage.JSON_OBJECT:
				sequence_JSONObject(context, (JSONObject) semanticObject); 
				return; 
			case JsonPackage.JSON_PAIR:
				sequence_JSONPair(context, (JSONPair) semanticObject); 
				return; 
			case JsonPackage.JSON_STRING:
				sequence_JSONString(context, (JSONString) semanticObject); 
				return; 
			case JsonPackage.JSON_VALUE:
				sequence_JSONValue(context, (JSONValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     JSONArray returns JSONArray
	 *
	 * Constraint:
	 *     (values+=JSONValue values+=JSONValue*)?
	 */
	protected void sequence_JSONArray(ISerializationContext context, JSONArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSONBoolean returns JSONBoolean
	 *
	 * Constraint:
	 *     value=BOOLEAN
	 */
	protected void sequence_JSONBoolean(ISerializationContext context, JSONBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonPackage.Literals.JSON_BOOLEAN__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonPackage.Literals.JSON_BOOLEAN__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJSONBooleanAccess().getValueBOOLEANTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JSONNull returns JSONNull
	 *
	 * Constraint:
	 *     value=NULL
	 */
	protected void sequence_JSONNull(ISerializationContext context, JSONNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonPackage.Literals.JSON_NULL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonPackage.Literals.JSON_NULL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJSONNullAccess().getValueNULLTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JSONNumber returns JSONNumber
	 *
	 * Constraint:
	 *     value=NUMBER
	 */
	protected void sequence_JSONNumber(ISerializationContext context, JSONNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonPackage.Literals.JSON_NUMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonPackage.Literals.JSON_NUMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJSONNumberAccess().getValueNUMBERTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JSONObject returns JSONObject
	 *
	 * Constraint:
	 *     (pairs+=JSONPair pairs+=JSONPair*)?
	 */
	protected void sequence_JSONObject(ISerializationContext context, JSONObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSONPair returns JSONPair
	 *
	 * Constraint:
	 *     (key=JSONString value=JSONValue)
	 */
	protected void sequence_JSONPair(ISerializationContext context, JSONPair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonPackage.Literals.JSON_PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonPackage.Literals.JSON_PAIR__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonPackage.Literals.JSON_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonPackage.Literals.JSON_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJSONPairAccess().getKeyJSONStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getJSONPairAccess().getValueJSONValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JSONString returns JSONString
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_JSONString(ISerializationContext context, JSONString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonPackage.Literals.JSON_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonPackage.Literals.JSON_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJSONStringAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JSONValue returns JSONValue
	 *
	 * Constraint:
	 *     (
	 *         value=JSONObject | 
	 *         value=JSONArray | 
	 *         value=JSONString | 
	 *         value=JSONNumber | 
	 *         value=JSONBoolean | 
	 *         value=JSONNull
	 *     )
	 */
	protected void sequence_JSONValue(ISerializationContext context, JSONValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
