/*
 * generated by Xtext 2.17.1
 */
package com.faug.mvc.js.ide.contentassist.antlr;

import com.faug.mvc.js.ide.contentassist.antlr.internal.InternalFaugParser;
import com.faug.mvc.js.services.FaugGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class FaugParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FaugGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FaugGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getJSONValueAccess().getAlternatives(), "rule__JSONValue__Alternatives");
			builder.put(grammarAccess.getJSONObjectAccess().getGroup(), "rule__JSONObject__Group__0");
			builder.put(grammarAccess.getJSONObjectAccess().getGroup_2(), "rule__JSONObject__Group_2__0");
			builder.put(grammarAccess.getJSONObjectAccess().getGroup_2_1(), "rule__JSONObject__Group_2_1__0");
			builder.put(grammarAccess.getJSONPairAccess().getGroup(), "rule__JSONPair__Group__0");
			builder.put(grammarAccess.getJSONArrayAccess().getGroup(), "rule__JSONArray__Group__0");
			builder.put(grammarAccess.getJSONArrayAccess().getGroup_2(), "rule__JSONArray__Group_2__0");
			builder.put(grammarAccess.getJSONArrayAccess().getGroup_2_1(), "rule__JSONArray__Group_2_1__0");
			builder.put(grammarAccess.getJSONStringAccess().getGroup(), "rule__JSONString__Group__0");
			builder.put(grammarAccess.getJSONNumberAccess().getGroup(), "rule__JSONNumber__Group__0");
			builder.put(grammarAccess.getJSONBooleanAccess().getGroup(), "rule__JSONBoolean__Group__0");
			builder.put(grammarAccess.getJSONNullAccess().getGroup(), "rule__JSONNull__Group__0");
			builder.put(grammarAccess.getJSONValueAccess().getValueAssignment_0(), "rule__JSONValue__ValueAssignment_0");
			builder.put(grammarAccess.getJSONValueAccess().getValueAssignment_1(), "rule__JSONValue__ValueAssignment_1");
			builder.put(grammarAccess.getJSONValueAccess().getValueAssignment_2(), "rule__JSONValue__ValueAssignment_2");
			builder.put(grammarAccess.getJSONValueAccess().getValueAssignment_3(), "rule__JSONValue__ValueAssignment_3");
			builder.put(grammarAccess.getJSONValueAccess().getValueAssignment_4(), "rule__JSONValue__ValueAssignment_4");
			builder.put(grammarAccess.getJSONValueAccess().getValueAssignment_5(), "rule__JSONValue__ValueAssignment_5");
			builder.put(grammarAccess.getJSONObjectAccess().getPairsAssignment_2_0(), "rule__JSONObject__PairsAssignment_2_0");
			builder.put(grammarAccess.getJSONObjectAccess().getPairsAssignment_2_1_1(), "rule__JSONObject__PairsAssignment_2_1_1");
			builder.put(grammarAccess.getJSONPairAccess().getKeyAssignment_0(), "rule__JSONPair__KeyAssignment_0");
			builder.put(grammarAccess.getJSONPairAccess().getValueAssignment_2(), "rule__JSONPair__ValueAssignment_2");
			builder.put(grammarAccess.getJSONArrayAccess().getValuesAssignment_2_0(), "rule__JSONArray__ValuesAssignment_2_0");
			builder.put(grammarAccess.getJSONArrayAccess().getValuesAssignment_2_1_1(), "rule__JSONArray__ValuesAssignment_2_1_1");
			builder.put(grammarAccess.getJSONStringAccess().getValueAssignment_1(), "rule__JSONString__ValueAssignment_1");
			builder.put(grammarAccess.getJSONNumberAccess().getValueAssignment_1(), "rule__JSONNumber__ValueAssignment_1");
			builder.put(grammarAccess.getJSONBooleanAccess().getValueAssignment_1(), "rule__JSONBoolean__ValueAssignment_1");
			builder.put(grammarAccess.getJSONNullAccess().getValueAssignment_1(), "rule__JSONNull__ValueAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FaugGrammarAccess grammarAccess;

	@Override
	protected InternalFaugParser createParser() {
		InternalFaugParser result = new InternalFaugParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FaugGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FaugGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
